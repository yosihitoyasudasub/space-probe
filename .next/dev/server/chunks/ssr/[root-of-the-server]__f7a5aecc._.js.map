{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 10, "column": 0}, "map": {"version":3,"sources":["file:///D:/my_projects/space-probe-game-next/space-probe-game-next/src/lib/threeSetup.ts"],"sourcesContent":["import * as THREE from 'three';\r\nimport { OrbitControls } from 'three/examples/jsm/controls/OrbitControls';\r\n\r\n// Module-level physics parameters (tunable)\r\nexport const G = 1.0;\r\nexport const centralMass = 2000.0;\r\n\r\nexport type ProbeState = {\r\n    position: THREE.Vector3;\r\n    velocity: THREE.Vector3; // vector velocity in scene units/sec\r\n    distance: number; // accumulated path length\r\n    fuel: number; // percent\r\n    slingshots: number;\r\n    status: string;\r\n};\r\n\r\nexport function initThreeJS(canvas: HTMLCanvasElement) {\r\n    const scene = new THREE.Scene();\r\n    const camera = new THREE.PerspectiveCamera(60, window.innerWidth / window.innerHeight, 0.1, 10000);\r\n    camera.position.set(0, 5, 20);\r\n\r\n    const renderer = new THREE.WebGLRenderer({ canvas, antialias: true });\r\n    renderer.setSize(window.innerWidth, window.innerHeight);\r\n    renderer.setPixelRatio(Math.min(window.devicePixelRatio || 1, 2));\r\n\r\n    const ambient = new THREE.AmbientLight(0xffffff, 0.6);\r\n    scene.add(ambient);\r\n\r\n    const directional = new THREE.DirectionalLight(0xffffff, 0.8);\r\n    directional.position.set(5, 10, 7.5);\r\n    scene.add(directional);\r\n\r\n    // Simple grid for reference\r\n    const grid = new THREE.GridHelper(100, 100, 0x444444, 0x222222);\r\n    scene.add(grid);\r\n\r\n    // Minimal probe mesh for visualization\r\n    const probeGeom = new THREE.SphereGeometry(0.3, 8, 8);\r\n    const probeMat = new THREE.MeshStandardMaterial({ color: 0xffaa00 });\r\n    const probe = new THREE.Mesh(probeGeom, probeMat);\r\n    // place probe at an initial offset so gravity produces orbital motion\r\n    const initialRadius = 50;\r\n    probe.position.set(0, 0, initialRadius);\r\n    scene.add(probe);\r\n\r\n    // OrbitControls for interactive camera\r\n    const controls = new OrbitControls(camera, renderer.domElement);\r\n    controls.enableDamping = true;\r\n    controls.dampingFactor = 0.05;\r\n    controls.enablePan = true;\r\n    controls.update();\r\n\r\n    // Trail (orbit path) - sample points stored as Vector3 and rendered smooth via Catmull-Rom\r\n    const trailPoints: THREE.Vector3[] = [];\r\n    const trailGeometry = new THREE.BufferGeometry();\r\n    const trailMaterial = new THREE.LineBasicMaterial({ color: 0x00ff88 });\r\n    const trailLine = new THREE.Line(trailGeometry, trailMaterial);\r\n    scene.add(trailLine);\r\n\r\n    function addTrailPoint(p: THREE.Vector3) {\r\n        const maxPoints = 1000;\r\n        trailPoints.push(p.clone());\r\n        if (trailPoints.length > maxPoints) {\r\n            trailPoints.shift();\r\n        }\r\n\r\n        if (trailPoints.length >= 2) {\r\n            // create a Catmull-Rom spline through the sampled points\r\n            const curve = new THREE.CatmullRomCurve3(trailPoints, false, 'catmullrom', 0.5);\r\n            // sample the curve to generate smooth geometry\r\n            const divisions = Math.min(Math.max(trailPoints.length * 8, 64), 2000);\r\n            const smoothPoints = curve.getPoints(divisions);\r\n            const positions: number[] = [];\r\n            for (let i = 0; i < smoothPoints.length; i++) {\r\n                positions.push(smoothPoints[i].x, smoothPoints[i].y, smoothPoints[i].z);\r\n            }\r\n            trailGeometry.setAttribute('position', new THREE.Float32BufferAttribute(positions, 3));\r\n            trailGeometry.setDrawRange(0, positions.length / 3);\r\n            trailGeometry.computeBoundingSphere();\r\n        }\r\n    }\r\n\r\n    // Physics initial state: set tangential velocity for near-circular orbit\r\n    // Tunable gravitational parameters are defined at module scope (see below)\r\n    const r0 = initialRadius;\r\n    const vCircular = Math.sqrt((G * centralMass) / r0);\r\n\r\n    const state: ProbeState = {\r\n        position: probe.position.clone(),\r\n        velocity: new THREE.Vector3(vCircular, 0, 0), // tangential (x-direction)\r\n        distance: 0,\r\n        fuel: 100,\r\n        slingshots: 0,\r\n        status: 'Idle',\r\n    };\r\n\r\n    function onResize() {\r\n        camera.aspect = window.innerWidth / window.innerHeight;\r\n        camera.updateProjectionMatrix();\r\n        renderer.setSize(window.innerWidth, window.innerHeight);\r\n        renderer.setPixelRatio(Math.min(window.devicePixelRatio || 1, 2));\r\n    }\r\n\r\n    window.addEventListener('resize', onResize);\r\n\r\n    function dispose() {\r\n        window.removeEventListener('resize', onResize);\r\n        renderer.dispose();\r\n        // Traverse scene and dispose geometries/materials\r\n        scene.traverse((obj) => {\r\n            // @ts-ignore\r\n            if (obj.geometry) obj.geometry.dispose?.();\r\n            // @ts-ignore\r\n            if (obj.material) {\r\n                const mat = obj.material as any;\r\n                if (Array.isArray(mat)) mat.forEach((m) => m.dispose && m.dispose());\r\n                else mat.dispose && mat.dispose();\r\n            }\r\n        });\r\n    }\r\n\r\n    return { scene, camera, renderer, dispose, state, probe, controls, addTrailPoint };\r\n}\r\n\r\n// Very small physics step for demo purposes. Replace with real integrator later.\r\nexport function updatePhysics(state: ProbeState, dt: number) {\r\n    // Semi-implicit Euler integrator with central gravity at origin\r\n    // Tunable constants\r\n    const G = 200.0; // gravitational constant (scene units)\r\n    const centralMass = 1000.0; // mass of central body at origin\r\n\r\n    // compute vector from origin to probe\r\n    const r = state.position.clone();\r\n    const rLen = r.length();\r\n    let accel = new THREE.Vector3(0, 0, 0);\r\n\r\n    if (rLen > 1e-6) {\r\n        const rHat = r.clone().normalize();\r\n        // gravity acceleration toward origin: -G * M / r^2 * rHat\r\n        const aMag = -(G * centralMass) / (rLen * rLen);\r\n        accel = rHat.multiplyScalar(aMag);\r\n    }\r\n\r\n    // semi-implicit Euler: v += a * dt; pos += v * dt\r\n    state.velocity.addScaledVector(accel, dt);\r\n    const move = state.velocity.clone().multiplyScalar(dt);\r\n    state.position.add(move);\r\n    state.distance += move.length();\r\n\r\n    // fuel consumption placeholder\r\n    const thrust = 0; // no thrust by default\r\n    if (state.fuel > 0 && thrust > 0) {\r\n        state.fuel = Math.max(0, state.fuel - thrust * dt);\r\n    }\r\n\r\n    // update status\r\n    state.status = state.velocity.length() > 1e-3 ? 'Running' : 'Idle';\r\n}\r\n\r\nexport default initThreeJS;\r\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 169, "column": 0}, "map": {"version":3,"sources":["file:///D:/my_projects/space-probe-game-next/space-probe-game-next/src/components/GameCanvas.tsx"],"sourcesContent":["\"use client\";\n\nimport React, { useEffect, useRef } from 'react';\nimport { initThreeJS, updatePhysics } from '../lib/threeSetup';\n\ntype HUDSetters = {\n    setStatus: React.Dispatch<React.SetStateAction<string>>;\n    setVelocity: React.Dispatch<React.SetStateAction<number>>;\n    setDistance: React.Dispatch<React.SetStateAction<number>>;\n    setFuel: React.Dispatch<React.SetStateAction<number>>;\n    setSlingshots: React.Dispatch<React.SetStateAction<number>>;\n};\n\ninterface Props {\n    hudSetters?: HUDSetters;\n}\n\nconst GameCanvas: React.FC<Props> = ({ hudSetters }) => {\n    const canvasRef = useRef<HTMLCanvasElement | null>(null);\n    const rafRef = useRef<number | null>(null);\n\n    useEffect(() => {\n        const canvas = canvasRef.current;\n        if (!canvas) return;\n    const hudUpdateRef = { current: undefined as any } as React.MutableRefObject<any>;\n    const trailRef = { current: undefined as any } as React.MutableRefObject<any>;\n\n    const { scene, camera, renderer, dispose, state, probe, controls, addTrailPoint } = initThreeJS(canvas);\n\n        // Fixed timestep physics loop (e.g., 60 Hz)\n        const fixedTimeStep = 1 / 60; // seconds\n        let accumulator = 0;\n        let lastTime = performance.now() / 1000;\n\n        const animate = () => {\n            const now = performance.now() / 1000;\n            let delta = now - lastTime;\n            lastTime = now;\n\n            // clamp delta to avoid spiral of death\n            if (delta > 0.25) delta = 0.25;\n\n            accumulator += delta;\n            while (accumulator >= fixedTimeStep) {\n                updatePhysics(state, fixedTimeStep);\n                accumulator -= fixedTimeStep;\n            }\n\n            // synchronize visual probe mesh with simulated state\n            try {\n                if (probe && state.position) probe.position.copy(state.position);\n            } catch (e) {\n                // ignore copy errors in unusual cases\n            }\n\n            // update orbit controls if available\n            try {\n                controls?.update();\n            } catch (e) {\n                // ignore\n            }\n\n            // add trail point periodically (every 100ms)\n            if (addTrailPoint) {\n                const nowMsPoint = performance.now();\n                if (!trailRef.current) trailRef.current = { lastMs: nowMsPoint };\n                if (nowMsPoint - trailRef.current.lastMs > 100) {\n                    try {\n                        addTrailPoint(state.position);\n                    } catch (e) {\n                        // ignore\n                    }\n                    trailRef.current.lastMs = nowMsPoint;\n                }\n            }\n\n                // update HUD if setters provided (throttled)\n                if (hudSetters) {\n                    const nowMs = performance.now();\n                    const lastMs = (hudUpdateRef.current && hudUpdateRef.current.lastMs) || 0;\n                    const lastVals = (hudUpdateRef.current && hudUpdateRef.current.lastVals) || { velocity: -1, distance: -1, fuel: -1, slingshots: -1, status: '' };\n\n                    const speed = state.velocity ? state.velocity.length() : 0;\n                    const shouldUpdateTime = nowMs - lastMs > 200; // 200ms throttle\n                    const largeChange = Math.abs(speed - lastVals.velocity) > 0.5 || Math.abs(state.distance - lastVals.distance) > 0.1 || Math.abs(state.fuel - lastVals.fuel) > 1 || state.slingshots !== lastVals.slingshots || state.status !== lastVals.status;\n\n                    if (shouldUpdateTime || largeChange) {\n                        hudSetters.setVelocity(speed);\n                        hudSetters.setDistance(state.distance);\n                        hudSetters.setFuel(state.fuel);\n                        hudSetters.setSlingshots(state.slingshots);\n                        hudSetters.setStatus(state.status);\n\n                        hudUpdateRef.current = { lastMs: nowMs, lastVals: { velocity: speed, distance: state.distance, fuel: state.fuel, slingshots: state.slingshots, status: state.status } };\n                    }\n                }\n\n            renderer.render(scene, camera);\n            rafRef.current = requestAnimationFrame(animate);\n        };\n\n        rafRef.current = requestAnimationFrame(animate);\n\n        return () => {\n            if (rafRef.current) cancelAnimationFrame(rafRef.current);\n            dispose();\n        };\n    }, [hudSetters]);\n\n    return <canvas ref={canvasRef} style={{ display: 'block', width: '100vw', height: '100vh' }} />;\n};\n\nexport default GameCanvas;"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 296, "column": 0}, "map": {"version":3,"sources":["file:///D:/my_projects/space-probe-game-next/space-probe-game-next/src/components/HUD.tsx"],"sourcesContent":["import React from 'react';\n\ninterface HUDProps {\n    status?: string;\n    velocity?: number;\n    distance?: number;\n    fuel?: number;\n    slingshots?: number;\n}\n\nconst HUD: React.FC<HUDProps> = ({\n    status = 'Idle',\n    velocity = 0,\n    distance = 0,\n    fuel = 100,\n    slingshots = 0,\n}) => {\n    return (\n        <div id=\"ui\">\n            <h2>探査機データ</h2>\n            <p><span className=\"stat-label\">状態:</span><span className=\"stat-value\">{status}</span></p>\n            <p><span className=\"stat-label\">速度:</span><span className=\"stat-value\">{velocity.toFixed(1)}</span> km/s</p>\n            <p><span className=\"stat-label\">距離:</span><span className=\"stat-value\">{distance.toFixed(2)}</span> AU</p>\n            <p><span className=\"stat-label\">燃料:</span><span className=\"stat-value\">{fuel.toFixed(1)}</span>%</p>\n            <p><span className=\"stat-label\">スイングバイ:</span><span className=\"stat-value\">{slingshots}</span> 回</p>\n        </div>\n    );\n};\n\nexport default HUD;"],"names":[],"mappings":";;;;;;AAUA,MAAM,MAA0B,CAAC,EAC7B,SAAS,MAAM,EACf,WAAW,CAAC,EACZ,WAAW,CAAC,EACZ,OAAO,GAAG,EACV,aAAa,CAAC,EACjB;IACG,qBACI,8OAAC;QAAI,IAAG;;0BACJ,8OAAC;0BAAG;;;;;;0BACJ,8OAAC;;kCAAE,8OAAC;wBAAK,WAAU;kCAAa;;;;;;kCAAU,8OAAC;wBAAK,WAAU;kCAAc;;;;;;;;;;;;0BACxE,8OAAC;;kCAAE,8OAAC;wBAAK,WAAU;kCAAa;;;;;;kCAAU,8OAAC;wBAAK,WAAU;kCAAc,SAAS,OAAO,CAAC;;;;;;oBAAU;;;;;;;0BACnG,8OAAC;;kCAAE,8OAAC;wBAAK,WAAU;kCAAa;;;;;;kCAAU,8OAAC;wBAAK,WAAU;kCAAc,SAAS,OAAO,CAAC;;;;;;oBAAU;;;;;;;0BACnG,8OAAC;;kCAAE,8OAAC;wBAAK,WAAU;kCAAa;;;;;;kCAAU,8OAAC;wBAAK,WAAU;kCAAc,KAAK,OAAO,CAAC;;;;;;oBAAU;;;;;;;0BAC/F,8OAAC;;kCAAE,8OAAC;wBAAK,WAAU;kCAAa;;;;;;kCAAc,8OAAC;wBAAK,WAAU;kCAAc;;;;;;oBAAkB;;;;;;;;;;;;;AAG1G;uCAEe","debugId":null}},
    {"offset": {"line": 449, "column": 0}, "map": {"version":3,"sources":["file:///D:/my_projects/space-probe-game-next/space-probe-game-next/src/components/Controls.tsx"],"sourcesContent":["import React from 'react';\n\nconst Controls: React.FC = () => {\n    return (\n        <div id=\"controls\">\n            <h3>操作方法</h3>\n            <p>← → : 左右に推進</p>\n            <p>↑ : 前進加速</p>\n            <p>↓ : 減速</p>\n            <p>R : リスタート</p>\n        </div>\n    );\n};\n\nexport default Controls;"],"names":[],"mappings":";;;;;;AAEA,MAAM,WAAqB;IACvB,qBACI,8OAAC;QAAI,IAAG;;0BACJ,8OAAC;0BAAG;;;;;;0BACJ,8OAAC;0BAAE;;;;;;0BACH,8OAAC;0BAAE;;;;;;0BACH,8OAAC;0BAAE;;;;;;0BACH,8OAAC;0BAAE;;;;;;;;;;;;AAGf;uCAEe","debugId":null}},
    {"offset": {"line": 506, "column": 0}, "map": {"version":3,"sources":["file:///D:/my_projects/space-probe-game-next/space-probe-game-next/src/app/page.tsx"],"sourcesContent":["\"use client\";\n\nimport React, { useState, useCallback } from 'react';\nimport GameCanvas from '../components/GameCanvas';\nimport HUD from '../components/HUD';\nimport Controls from '../components/Controls';\n\nconst Page = () => {\n    const [status, setStatus] = useState<string>('Idle');\n    const [velocity, setVelocity] = useState<number>(0);\n    const [distance, setDistance] = useState<number>(0);\n    const [fuel, setFuel] = useState<number>(100);\n    const [slingshots, setSlingshots] = useState<number>(0);\n\n    // stable setters object to pass down (memoized so reference is stable)\n    const hudSetters = React.useMemo(\n        () => ({ setStatus, setVelocity, setDistance, setFuel, setSlingshots }),\n        [setStatus, setVelocity, setDistance, setFuel, setSlingshots]\n    );\n\n    return (\n        <div>\n            <GameCanvas hudSetters={hudSetters} />\n            <HUD status={status} velocity={velocity} distance={distance} fuel={fuel} slingshots={slingshots} />\n            <Controls />\n        </div>\n    );\n};\n\nexport default Page;"],"names":[],"mappings":";;;;;AAEA;AACA;AACA;AACA;AALA;;;;;;AAOA,MAAM,OAAO;IACT,MAAM,CAAC,QAAQ,UAAU,GAAG,IAAA,iNAAQ,EAAS;IAC7C,MAAM,CAAC,UAAU,YAAY,GAAG,IAAA,iNAAQ,EAAS;IACjD,MAAM,CAAC,UAAU,YAAY,GAAG,IAAA,iNAAQ,EAAS;IACjD,MAAM,CAAC,MAAM,QAAQ,GAAG,IAAA,iNAAQ,EAAS;IACzC,MAAM,CAAC,YAAY,cAAc,GAAG,IAAA,iNAAQ,EAAS;IAErD,uEAAuE;IACvE,MAAM,aAAa,gNAAK,CAAC,OAAO,CAC5B,IAAM,CAAC;YAAE;YAAW;YAAa;YAAa;YAAS;QAAc,CAAC,GACtE;QAAC;QAAW;QAAa;QAAa;QAAS;KAAc;IAGjE,qBACI,8OAAC;;0BACG,8OAAC,2IAAU;gBAAC,YAAY;;;;;;0BACxB,8OAAC,oIAAG;gBAAC,QAAQ;gBAAQ,UAAU;gBAAU,UAAU;gBAAU,MAAM;gBAAM,YAAY;;;;;;0BACrF,8OAAC,yIAAQ;;;;;;;;;;;AAGrB;uCAEe","debugId":null}}]
}